generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email String
  password String
  profile String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment Comment[]
  replyComment ReplyComment[]

  @@unique([username, email])
}


model WatchList {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId 
  poster String
  name String
  rating String?
  quality String?
  sub Int?
  dub Int?
  type String?
  duration String?
  status String 
  infoId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  comment String
  spoiler Boolean?
  isEdited Boolean @default(false)
  like String[] @db.ObjectId
  dislike String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  replyComment ReplyComment[]

  user User @relation(fields: [userId], references: [id])
}


model ReplyComment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  commentId String @db.ObjectId
  replyComment String
  spoiler Boolean?
  isEdited Boolean @default(false)
  like String[] @db.ObjectId
  dislike String[] @db.ObjectId
  replyTo String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  user User @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

